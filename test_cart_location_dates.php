<?php
require_once 'vendor/autoload.php';

use Illuminate\Foundation\Application;

$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\User;
use App\Models\CartLocation;
use App\Models\CartItemLocation;
use App\Models\Product;
use Carbon\Carbon;

echo "=== Test API modification dates panier location ===\n\n";

// Trouver un utilisateur
$user = User::first();
if (!$user) {
    echo "‚ùå Aucun utilisateur trouv√©\n";
    exit;
}

// Trouver un panier de location avec des items
$cartLocation = $user->activeCartLocation;
if (!$cartLocation || $cartLocation->items->isEmpty()) {
    echo "‚ùå Aucun panier de location actif avec des items trouv√© pour l'utilisateur {$user->id}\n";
    exit;
}

$item = $cartLocation->items->first();
echo "üì¶ Item test√©: {$item->product_name}\n";
echo "üóìÔ∏è Dates actuelles: {$item->start_date->format('Y-m-d')} ‚Üí {$item->end_date->format('Y-m-d')}\n";
echo "‚è±Ô∏è Dur√©e actuelle: {$item->duration_days} jour(s)\n\n";

// V√©rifier les contraintes du produit
$product = $item->product;
echo "üìã Contraintes du produit:\n";
echo "   - Dur√©e min: {$product->min_rental_days} jour(s)\n";
echo "   - Dur√©e max: {$product->max_rental_days} jour(s)\n\n";

// Test 1: Essayer une p√©riode trop courte
$newStartDate = Carbon::now()->addDays(2);
$newEndDate = $newStartDate->copy()->addDays($product->min_rental_days - 2); // Trop court

echo "üß™ Test 1 - P√©riode trop courte:\n";
echo "Nouvelle p√©riode: {$newStartDate->format('Y-m-d')} ‚Üí {$newEndDate->format('Y-m-d')}\n";
echo "Nouvelle dur√©e: " . $newEndDate->diffInDays($newStartDate) . " jour(s)\n";

// Simuler la validation comme dans le contr√¥leur
$validation = $product->validateRentalPeriod($newStartDate, $newEndDate);
if ($validation['valid']) {
    echo "‚úÖ Validation pass√©e (inattendu)\n";
} else {
    echo "‚ùå Validation √©chou√©e (attendu):\n";
    foreach ($validation['errors'] as $error) {
        echo "   - $error\n";
    }
}
echo "\n";

// Test 2: Essayer une p√©riode trop longue
$newStartDate = Carbon::now()->addDays(2);
$newEndDate = $newStartDate->copy()->addDays($product->max_rental_days + 1); // Trop long

echo "üß™ Test 2 - P√©riode trop longue:\n";
echo "Nouvelle p√©riode: {$newStartDate->format('Y-m-d')} ‚Üí {$newEndDate->format('Y-m-d')}\n";
echo "Nouvelle dur√©e: " . $newEndDate->diffInDays($newStartDate) . " jour(s)\n";

$validation = $product->validateRentalPeriod($newStartDate, $newEndDate);
if ($validation['valid']) {
    echo "‚úÖ Validation pass√©e (inattendu)\n";
} else {
    echo "‚ùå Validation √©chou√©e (attendu):\n";
    foreach ($validation['errors'] as $error) {
        echo "   - $error\n";
    }
}
echo "\n";

// Test 3: Essayer une p√©riode valide
$newStartDate = Carbon::now()->addDays(2);
$newEndDate = $newStartDate->copy()->addDays($product->min_rental_days + 1); // Valide

echo "üß™ Test 3 - P√©riode valide:\n";
echo "Nouvelle p√©riode: {$newStartDate->format('Y-m-d')} ‚Üí {$newEndDate->format('Y-m-d')}\n";
echo "Nouvelle dur√©e: " . $newEndDate->diffInDays($newStartDate) . " jour(s)\n";

$validation = $product->validateRentalPeriod($newStartDate, $newEndDate);
if ($validation['valid']) {
    echo "‚úÖ Validation pass√©e (attendu)\n";
} else {
    echo "‚ùå Validation √©chou√©e (inattendu):\n";
    foreach ($validation['errors'] as $error) {
        echo "   - $error\n";
    }
}

echo "\n=== Tests termin√©s ===\n";
