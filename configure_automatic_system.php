<?php

require_once 'vendor/autoload.php';

$app = require_once 'bootstrap/app.php';
$app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\OrderLocation;
use Illuminate\Support\Facades\Log;

echo "=== CONFIGURATION DU SYST√àME AUTOMATIQUE DE LOCATIONS ===\n\n";

// 1. V√©rifier la configuration de la queue
echo "1. üìã V√âRIFICATION DE LA CONFIGURATION\n";
echo "   Driver de queue : " . config('queue.default') . "\n";
echo "   Base de donn√©es : " . config('database.default') . "\n";

// 2. Cr√©er les tables de queue si n√©cessaire
echo "\n2. üóÑÔ∏è CONFIGURATION DES TABLES DE QUEUE\n";
try {
    if (!Schema::hasTable('jobs')) {
        echo "   Cr√©ation de la table jobs...\n";
        Artisan::call('queue:table');
        Artisan::call('migrate', ['--force' => true]);
        echo "   ‚úÖ Table jobs cr√©√©e\n";
    } else {
        echo "   ‚úÖ Table jobs existe d√©j√†\n";
    }
} catch (\Exception $e) {
    echo "   ‚ö†Ô∏è Erreur table jobs : " . $e->getMessage() . "\n";
}

// 3. V√©rifier les jobs programm√©s
echo "\n3. üì¶ V√âRIFICATION DES JOBS EN ATTENTE\n";
$pendingJobs = DB::table('jobs')->count();
echo "   Jobs en attente : {$pendingJobs}\n";

// 4. Tester le syst√®me de mail
echo "\n4. üìß TEST DU SYST√àME D'EMAIL\n";
try {
    $testOrder = OrderLocation::where('status', 'active')->first();
    if ($testOrder) {
        echo "   Commande test trouv√©e : {$testOrder->order_number}\n";
        echo "   Email destinataire : {$testOrder->user->email}\n";
        echo "   ‚úÖ Syst√®me d'email pr√™t\n";
    } else {
        echo "   ‚ö†Ô∏è Aucune location active pour test\n";
    }
} catch (\Exception $e) {
    echo "   ‚ùå Erreur syst√®me email : " . $e->getMessage() . "\n";
}

// 5. D√©marrer les locations en retard
echo "\n5. üöÄ D√âMARRAGE DES LOCATIONS EN RETARD\n";
$locationsToStart = OrderLocation::where('status', 'confirmed')
    ->where('start_date', '<=', now())
    ->get();

echo "   Locations √† d√©marrer : {$locationsToStart->count()}\n";

foreach ($locationsToStart as $location) {
    try {
        echo "   üü¢ D√©marrage {$location->order_number}...";
        
        $location->update([
            'status' => 'active',
            'started_at' => now()
        ]);
        
        // Programmer l'envoi d'email via la queue
        \App\Jobs\StartRentalJob::dispatch($location);
        
        echo " ‚úÖ\n";
        Log::info("Location d√©marr√©e automatiquement : {$location->order_number}");
        
    } catch (\Exception $e) {
        echo " ‚ùå ({$e->getMessage()})\n";
    }
}

// 6. Instructions pour le worker
echo "\n6. ‚öôÔ∏è D√âMARRAGE DU WORKER DE QUEUE\n";
echo "   Pour traiter les jobs automatiquement, lancez :\n";
echo "   > php artisan queue:work --daemon --sleep=3 --tries=3\n\n";

echo "   Ou utilisez le fichier batch :\n";
echo "   > start_queue_worker.bat\n\n";

// 7. Programmer les t√¢ches automatiques
echo "7. ‚è∞ PROGRAMMATION DES T√ÇCHES AUTOMATIQUES\n";
try {
    // Programmer la v√©rification automatique
    \App\Jobs\AutoUpdateRentalStatusJob::dispatch()
        ->delay(now()->addMinutes(1));
    
    echo "   ‚úÖ V√©rification automatique programm√©e dans 1 minute\n";
    
    // Programmer les v√©rifications r√©currentes
    \App\Jobs\AutoUpdateRentalStatusJob::dispatch()
        ->delay(now()->addHours(1));
    
    echo "   ‚úÖ V√©rification r√©currente programm√©e dans 1 heure\n";
    
} catch (\Exception $e) {
    echo "   ‚ùå Erreur programmation : " . $e->getMessage() . "\n";
}

echo "\n=== SYST√àME CONFIGUR√â AVEC SUCC√àS ===\n";
echo "üîÑ Les transitions automatiques sont maintenant op√©rationnelles !\n";
echo "üìß Les emails de notification seront envoy√©s automatiquement.\n";
echo "‚è∞ Les v√©rifications auront lieu toutes les heures.\n\n";

echo "PROCHAINES √âTAPES :\n";
echo "1. Lancez le worker : php artisan queue:work --daemon\n";
echo "2. V√©rifiez les logs : tail -f storage/logs/laravel.log\n";
echo "3. Testez une nouvelle location pour v√©rifier le fonctionnement\n\n";
