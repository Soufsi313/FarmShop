<?php

namespace App\Console\Commands;

use App\Models\Product;
use Illuminate\Console\Command;

class FixProductEncoding extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'products:fix-encoding';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Fix HTML entity encoding issues in product names and descriptions';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç Recherche des produits avec probl√®mes d\'encodage...');
        
        // Rechercher les produits avec des entit√©s HTML
        $products = Product::where('name', 'like', '%&#%')
                           ->orWhere('description', 'like', '%&#%')
                           ->orWhere('short_description', 'like', '%&#%')
                           ->get();

        if ($products->count() > 0) {
            $this->error("‚ùå Trouv√© {$products->count()} produit(s) avec des probl√®mes d'encodage:");
            
            foreach ($products as $product) {
                $this->line("\nüì¶ ID: {$product->id}");
                $this->line("   Nom: {$product->name}");
                
                if (strpos($product->description, '&#') !== false) {
                    $this->line("   Description contient des entit√©s HTML");
                }
                
                if (strpos($product->short_description, '&#') !== false) {
                    $this->line("   Description courte contient des entit√©s HTML");
                }
            }
            
            $this->info("\nüîß Correction automatique des entit√©s HTML...");
            
            $fixed = 0;
            
            foreach ($products as $product) {
                $updated = false;
                $originalName = $product->name;
                
                // D√©coder les entit√©s HTML
                if (strpos($product->name, '&#') !== false) {
                    $product->name = html_entity_decode($product->name, ENT_QUOTES, 'UTF-8');
                    $updated = true;
                }
                
                if (strpos($product->description, '&#') !== false) {
                    $product->description = html_entity_decode($product->description, ENT_QUOTES, 'UTF-8');
                    $updated = true;
                }
                
                if (strpos($product->short_description, '&#') !== false) {
                    $product->short_description = html_entity_decode($product->short_description, ENT_QUOTES, 'UTF-8');
                    $updated = true;
                }
                
                if ($updated) {
                    $product->save();
                    $this->info("‚úÖ Corrig√©: {$originalName} ‚Üí {$product->name}");
                    $fixed++;
                }
            }
            
            $this->info("\nüéâ {$fixed} produit(s) corrig√©(s) avec succ√®s!");
            
        } else {
            $this->info("‚úÖ Aucun produit avec probl√®me d'encodage trouv√©.");
        }

        $this->info("\nüîç V√©rification finale...");
        $remaining = Product::where('name', 'like', '%&#%')
                           ->orWhere('description', 'like', '%&#%')
                           ->orWhere('short_description', 'like', '%&#%')
                           ->count();

        if ($remaining == 0) {
            $this->info("‚úÖ Tous les probl√®mes d'encodage ont √©t√© corrig√©s!");
        } else {
            $this->error("‚ö†Ô∏è  Il reste {$remaining} produit(s) avec des probl√®mes d'encodage.");
        }
        
        return 0;
    }
}
